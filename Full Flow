					   hooks(secret-text)           build_pipe    	                           sonar_pipeline
Bitbucket ----> Merged ------------------> Jenkins --------------> Maven build --------> JFrog -----------------> SonarQube -----> Ansible -----> Tomcat Server


CDelivery - Manual check before prod deployment
CDeployment - Automated till prod deplyment

YAML - Yaml Aint Markup language -> data serialization

	Indendations
	> single line strring
	| multi line string
	--- mutiple yaml file config


Ansible - Provisioning, config management with multiple servers (Iaas)

	pros -> agentless, simple YAML

	Use key-based authentication
	Modules - All tools to use (apt, docker)
	ansible.cfg
	Inventory (host details)

		Config Structure

			10.24.24.52
			
			[webservers]
			10.24.25.32
			10.24.25.31

			[databases]
			10.24.25.42
			10.24.25.41

		Commands

			ansible -i ./inventory/hosts ubuntu -m ping --user sereverrradmin --ask-pass
			sshpass
			ansible-playbook ./playbooks/apt.yml --user serveradmin --ask-pass --ask-become-pass -i ./inventory/hosts --check
			ansible all -m ping -i hosts


	Playbooks (orchestrates - yaml file) - Multiple plays (Multiple tasks)

		YAML Example:
			hosts 
			tasks 
				- name: desc
				  shell: 
				  state: 
				  template:
			remote_user
			vars:
				{{ }}


	Templates (have static configs)

	Ansible Tower -> UI Dashboard

	Ansible -> configure the infrastructure
	Terraform (Core, State) (Declarative) (refresh, plan, apply, destroy) -> for infrastructure


	Examples: 

		Creating a jenkins job
		Deleting a jenkins job

		Creating a docker container
		Start a docker container
		Apply configuratino (Adding to network)


Maven (2.3) (mnvrepository.com) (JAVA_HOME, MAVEN_HOME) (/webapp/target) (~./m2)
	
	Apache HTTP Server - Normal server

	Tomcat provides dynamic content by employing Java-based logic (requires java)

    Maven is a built automation tool
	    
	    - Maven is a tool that helps us create projects easyly.	
		- Creating, adding, compiling, testing and deploying a project.
	    - Since maven is "built" automation tool, it helps us automate 
	    all of these steps.
	
	POM (Default values, target files)

		A Project Object Model or POM is the fundamental unit of work in Maven. XML file with information about the project and configuration details used by Maven to build the project. 
		pom.xml
		<project>
		  <modelVersion>4.0.0</modelVersion>		 
		  <groupId>com.mycompany.app</groupId>
		  <artifactId>my-app</artifactId>
		  <version>1</version>
		<dependencies>
		<dependency>
		<propeties>
		<plugin>
		<distributionManagement> - Repos location - settings.xml
		</project>

	Build Cycle, Dependencies, Plugins, Phases and Goals

		Default - Project Deployment ---------> validate(syntax) => compile => test-compile => test => package(jar, war) => integration-test => verify => install => deploy (Transfer to local or JFrog Repos)
		Clean- Cleaning -------------------> pre-clean => clean => post-clean
(/site)	Site - Documentation (mvn site) ---> pre-site => site => post-site => site-deploy

	Settings (~./m2/settings.xml)(Configs, Repos) => CLI Params => Parent POM (paths, entrypoint) (pom_eff.xml) => Project POM (pom.xml)

	Archetypes(Plugin) ---> Project Templates

	Local, Remote (any server), Central repository

	Plugins

		Build plugins
		Reporting Plugins
		3rd party plugins

	Commands

		mvn clean install
		mvn site
		mvn dependency:tree



Jenkins 
	
	Open source automation tool for CI/CD

	Pipelines - Plugin used to view the stages and tasks to perform one afterr other in pipeline forrm

	poll SCM - Cron syntax to run pipeline 

	Scripted pipeline - groovy script

		node {
			stage(){

				// groovy script
			
			}
		}

	Declarative pipeline

		http://loclhost:8081/env-vars.html - Check all the env varriables


		CODE_CHANGES = getGitChanges() - Groovy script
		Pipeline {

				agent any --> Where to Build
				environment {
					NEW_VERSION = "1.0.0"
					SERVER_CREDENTIALS = credentials("") --> From jenkins GUI config
				}
				parameters {
					string(name: 'VERSION', defaultValue: '', description: 'deplooy in stage')
					booleanParam
					choice
				}
				tools {
					maven 'Maven' ---> Name from the Jenkins GUI
				}
				stages {  --> Where work happens

					stage("build"){ --> What to do

						when {

						 	expression {
						 		BRANCH_NAME == 'dev' || BRANCH_NAME == 'master' && CODE_CHANGES == true
						 		params.VERSION 
						 	}
						}

						steps {
							echoo "Version ${NEW_VERSION}"
							sh "npm install"
							script {
								gv = load "path"
							}
						}
					}
				}
				post {
					always {
						(sending notifications)
					}
					success {

					}
					failure {

					}
				}
		}

	 (file)				  (ex: maven)
	checkout -> config -> deployment -> release note(notifications) -> terminate
	
	Post-Section
	JenkinsFile
	Backup Plugin
	Crdentials Plugin
	Artifactory plugin --> Add configuration --> Post-Build Actions (Deploy artifacts to Artifactory)
	Job DSL - Domain Specific Language

	Restart from stage
	JENKINS_HOME - xml files for settings logs and configurations


	"JenkinsFile" - Pipeline as a code

		Wrriting the declarative pipeline in the code itself
		Add in Build Configuration

Sonar Qube 

	Jenkins intergration

		stage('SonarQube analysis') {

			 withSonarQubeEnv(credentialsId: "generated token")
			 sh "mvn sonar:sonarr"
		}

		Configure the token as secret-text in the global jenkins config, update the server address 


JFrog Artifactory

	JFrog Artifactory is the single solution for housing and managing all the artifacts, binaries, packages, files, containers, and components for use throughout your software supply chain.

	Artifact repository - Version control for artifacts 

	Generate pom.xml file data to download and upload maven dependencies and builds


Tomcat server ()

	Web application server for running java apps

	/opt/tomcat/webapps ---> Place the WAR files to be exposed

	localhost:8080/manager/html --> uploading war file or any configuration for tomcat

	Components

		Catalina - URL Routing 
		Jasper   - compile JSP to servlet
		Coyote   - actual HTTP communication

	Commands

		bin/startup - start the server
		bin/shutdown

Git

	fetch
	push
	pull
	rebase

Linux system basics
	
	ls -lrth
	cat less more head tail page
	sudo su -
	free -h

	df -Th
	du -sh *

	proc/sys/vm/drop_caches
	swapoff -a swapon -a
	> DEMO.TXT

AWS
	
	 

Regex

